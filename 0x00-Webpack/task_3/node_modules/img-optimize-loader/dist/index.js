"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loader;

var _path = _interopRequireDefault(require("path"));

var _schemaUtils = _interopRequireDefault(require("schema-utils"));

var _loaderUtils = require("loader-utils");

var _compress = _interopRequireDefault(require("./lib/compress"));

var _inline = _interopRequireDefault(require("./lib/inline"));

var _emit = _interopRequireDefault(require("./lib/emit"));

var _constants = require("./constants");

var _options = _interopRequireDefault(require("./options.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * @file: main entry
 * @author: GaoYYYang
 * @date: 06 30 2020 4:51:22
 */
function checkNeedInline(option, size) {
  if (option.disable) {
    return false;
  }

  const {
    limit,
    symbol,
    antiSymbol
  } = option;
  const {
    resourceQuery
  } = this;
  const query = resourceQuery && (0, _loaderUtils.parseQuery)(resourceQuery) || {};

  if (query[symbol]) {
    return true;
  }

  if (query[antiSymbol]) {
    return false;
  }

  if (typeof limit === 'boolean') {
    return limit;
  }

  if (typeof limit === 'string') {
    return size <= parseInt(limit, 10);
  }

  if (typeof limit === 'number') {
    return size <= limit;
  }

  return true;
}

function inlineOrEmit(options, data, callback) {
  if (checkNeedInline.call(this, options, data.length)) {
    _inline.default.call(this, data, options, callback);
  } else {
    _emit.default.call(this, data, options, callback);
  }
}

function loader(source) {
  const options = (0, _loaderUtils.getOptions)(this) || {};
  const {
    mode,
    resourcePath
  } = this;

  const ext = _path.default.extname(resourcePath);

  const {
    outputPath,
    publicPath,
    postTransformPublicPath,
    context,
    emitFile
  } = options;
  const esModule = options.esModule || _constants.DEFAULT_ES_MODULE;
  let name = options.name || _constants.DEFAULT_NAME;

  if (options.compress && options.compress.webp && /(png|jpe?g)$/i.test(ext)) {
    name = name.replace('[ext]', 'webp');
  }

  (0, _schemaUtils.default)(_options.default, options, 'image-optimize-loader');
  let compressOption = _constants.LOSSY_LOW_COMPRESS_OPTION;

  if (options.compress) {
    if (options.compress.mode === 'high') {
      compressOption = Object.assign(_constants.LOSSY_HIGH_COMPRESS_OPTION, options.compress);
    } else if (options.compress.mode === 'loseless') {
      compressOption = Object.assign(_constants.LOSELESS_COMPRESS_OPTION, options.compress);
    } else {
      compressOption = Object.assign(compressOption, options.compress);
    }
  }

  let inlineOption = _constants.DEFAULT_INLINE_OPTION;

  if (options.inline) {
    inlineOption = Object.assign(inlineOption, options.inline);
  }

  if (mode === 'production' || compressOption.disableOnDevelopment === false || !compressOption.disable) {
    const callback = this.async();
    (0, _compress.default)(source, compressOption).then(data => {
      inlineOrEmit.call(this, { ...inlineOption,
        esModule,
        name,
        outputPath,
        publicPath,
        postTransformPublicPath,
        context,
        emitFile
      }, data, callback);
    }).catch(err => {
      callback(err);
    });
  } else {
    inlineOrEmit.call(this, { ...inlineOption,
      esModule,
      name,
      outputPath,
      publicPath,
      postTransformPublicPath,
      context,
      emitFile
    }, source, this.callback);
  }
}

module.exports.raw = true;